from random_g import generate_xml_with_modifications
from random_g import add_fin
from run import run_model
import numpy as np
import csv
import random
import matplotlib.pyplot as plt

# curve_list= [1470.62609798178, 1535.6998771658496, 1651.9103281107625, 1671.0997567784952, 1732.1767531607095, 1795.7078977626081]

# # Generation numbers from 0 to 5
# generation_numbers = list(range(len(curve_list)))

# # Plotting the generation fitness curve
# plt.plot(generation_numbers, curve_list, marker='o')
# plt.title('Generation Fitness Curve')
# plt.xlabel('Generation Number')
# plt.ylabel('Fitness')
# plt.grid(True)
# plt.show()


# max_height = [0.7159754173495874, 4.850542914612392, 3.1348508164080435, 4.990733963961253, 3.5663675321945796, 3.5248163034628766]
# max_distance = [4.742261767076931, 4.380282336325924, 4.4166795138111645, 5.579971489467975, 4.462561588968004, 4.462561588968004]

# # Generate x-axis values (assuming each data point corresponds to one trial)
# x_values = range(1, len(max_height) + 1)

# # Plotting
# plt.figure(figsize=(10, 5))

# # Plot maximum height reached
# plt.subplot(1, 2, 1)  # subplot with 1 row, 2 columns, and select the first plot
# plt.plot(x_values, max_height, marker='o', color='blue')
# plt.title('Maximum Height Reached')
# plt.xlabel('Trial')
# plt.ylabel('Height')

# # Plot maximum distance traveled
# plt.subplot(1, 2, 2)  # subplot with 1 row, 2 columns, and select the second plot
# plt.plot(x_values, max_distance, marker='o', color='green')
# plt.title('Maximum Distance Traveled')
# plt.xlabel('Trial')
# plt.ylabel('Distance')

# # Show plot
# plt.tight_layout()
# plt.show()

generation_samples=[ 
[[0.11238055409872366, 0.04899108239383211, 0.02196006135451126, 0.1517591855324633, 0.05281068937360732, 0.050966456128378426, 0.16714498727829402, 0.1962189719865402, 0.016495246763695383, 0.15887276669134442],[0.01764368762783753, 0.1276256688339976, 0.3614103861017809, 0.43593979879961364],150.10480659155263],
[[0.14382983764971902, 0.050177947280499624, 0.052289987892480155, 0.1184095730629542, 0.057312406573433505, 0.042202835786799606, 0.12696699788652865, 0.1736230502214956, 0.016086349970316813, 0.18878144492799404],[0.027905260172385378, 0.48205981207269644, 0.29928065579683893, 0.25886008920434744],165.93712067982906],
[[0.14812378918728483, 0.03211609717302704, 0.052289987892480155, 0.1184095730629542, 0.057312406573433505, 0.042202835786799606, 0.12696699788652865, 0.1962189719865402, 0.016086349970316813, 0.11680898679349702],[0.027905260172385378, 0.48205981207269644, 0.3614103861017809, 0.3292964679545546],162.72242893403896],
[[0.14812378918728483, 0.025846986619178274, 0.0452259514738704, 0.1517591855324633, 0.057312406573433505, 0.042202835786799606, 0.16714498727829402, 0.1962189719865402, 0.010467935489225911, 0.11680898679349702],[0.01764368762783753, 0.48205981207269644, 0.29928065579683893, 0.3292964679545546],160.64179622210963],
[[0.14812378918728483, 0.03211609717302704, 0.0452259514738704, 0.15443635280400816, 0.057312406573433505, 0.05034311879461975, 0.16714498727829402, 0.15798452872847518, 0.010467935489225911, 0.12544145855833777],[0.027682293755825614, 0.48205981207269644, 0.29928065579683893, 0.3292964679545546],158.69902610544457],
[[0.14812378918728483, 0.03211609717302704, 0.04110106364218784, 0.1517591855324633, 0.057312406573433505, 0.0562046448112762, 0.16714498727829402, 0.1962189719865402, 0.011341412852846377, 0.12544145855833777],[0.027682293755825614, 0.3439627386327866, 0.3614103861017809, 0.3292964679545546],169.15497217517282]

]

for i in range (6):
    file_name=f"generation_sample_{i}.xml"
    geno=generation_samples[i]
    size_modifications=geno[0]
    mass_modifications=geno[1]
    generate_xml_with_modifications(size_modifications, mass_modifications, file_name)

for i in range(6):
    file_name=f"generation_sample_{i}.xml"
    run_model(file_name)